#extension GL_EXT_gpu_shader4 : enable

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform vec3 color[200];
varying float LightIntensity;

uniform int ShaderMode;
uniform int SelectedCountry[200];
uniform int SelectOne;
uniform int HighlightOne;
uniform vec3 SelectionColor;
uniform vec3 HighlightColor;
const int SHADER_MODE_COUNTRIES = 0;
const int SHADER_MODE_SELECTION = 1;
const int SHADER_MODE_SELECT_ONE = 2;


void main(void)
{
	vec3 lightColor = vec3(texture2D(tex0, gl_TexCoord[0].st));
	vec3 maskColor = vec3(texture2D(tex1, gl_TexCoord[0].st));
	vec4 retC = vec4(0.0,0.0,0.0,1.0);
	if (maskColor.y == 1.0)
	{
		int index = int(round(maskColor.x*255.0));
		if (ShaderMode == SHADER_MODE_COUNTRIES)
		{
			if (index<200)
				retC = vec4(mix(color[index],lightColor, 0.7)*LightIntensity, 1.0);	
			else
				if (maskColor.x != 0.0 && maskColor.y != 0.0 && maskColor.z != 0.0)
					retC = vec4(vec3(0.0, 0.01, 0.7)*LightIntensity, 1.0);
		}
		if (ShaderMode == SHADER_MODE_SELECTION)
		{
			if ((index<200) && (SelectedCountry[index]==1))
				retC = vec4(mix(SelectionColor,lightColor, 0.7)*LightIntensity, 1.0);
			else
				retC = vec4(lightColor*LightIntensity, 1.0);
		}
		if (ShaderMode == SHADER_MODE_SELECT_ONE)
		{
			if (index == SelectOne)
				retC = vec4(mix(SelectionColor,lightColor, 0.7)*LightIntensity, 1.0);
			else
				retC = vec4(lightColor*LightIntensity, 1.0);
			
		}
		if (index == HighlightOne)
			retC.xyz = mix(retC.xyz, HighlightColor, 0.6)*LightIntensity;
	}
	else	
		if (maskColor.x != 0.0 && maskColor.y != 0.0 && maskColor.z != 0.0 )
		{
			if (ShaderMode == SHADER_MODE_COUNTRIES)
				retC = vec4(vec3(0.0, 0.01, 0.7)*LightIntensity, 1.0);
			if (ShaderMode == SHADER_MODE_SELECTION)
				retC = vec4(lightColor*LightIntensity, 1.0);
		}
	
	gl_FragColor = retC;
}